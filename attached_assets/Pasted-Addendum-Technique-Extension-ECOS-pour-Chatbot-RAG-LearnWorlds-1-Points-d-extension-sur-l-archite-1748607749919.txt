Addendum Technique : Extension ECOS
pour Chatbot RAG LearnWorlds
1. Points d'extension sur l'architecture existante
Ce document décrit les modifications minimales nécessaires pour étendre le chatbot
RAG LearnWorlds existant avec des fonctionnalités ECOS (Examen Clinique Objectif
Structuré).
1.1 Composants à étendre
├── server/ # Extensions backend
│ ├── services/
│ │ ├── ecos.service.ts # NOUVEAU
│ │ ├── promptGen.service.ts # NOUVEAU
│ │ └── evaluation.service.ts # NOUVEAU
│ ├── routes.ts # À étendre avec routes ECOS
│ └── db.ts # À étendre avec schéma ECOS
├── client/
│ ├── src/components/
│ │ ├── ecos/ # NOUVEAU : Composants ECOS
│ │ │ ├── TeacherAssistant.tsx
│ │ │ ├── PatientSimulator.tsx
│ │ │ └── EvaluationReport.tsx
│ └── src/pages/
│ ├── teacher/ # NOUVEAU : Pages enseignant
│ └── student/ # NOUVEAU : Pages étudiant
└── shared/
└── schemas/
└── ecos.schema.ts # NOUVEAU : Schémas ECOS
2. Schéma SQL complémentaire
Ajout minimal à la base PostgreSQL existante :
-- Scénarios ECOS
CREATE TABLE ecos_scenarios (
id SERIAL PRIMARY KEY,
title VARCHAR(255) NOT NULL,
description TEXT NOT NULL,
patient_prompt TEXT NOT NULL,
evaluation_criteria JSONB NOT NULL,
created_by VARCHAR(255) NOT NULL,
created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
-- Sessions ECOS
CREATE TABLE ecos_sessions (
id SERIAL PRIMARY KEY,
scenario_id INTEGER REFERENCES ecos_scenarios(id),
student_email VARCHAR(255) NOT NULL,
start_time TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
end_time TIMESTAMP WITH TIME ZONE,
status VARCHAR(50) DEFAULT 'in_progress'
);
-- Évaluations ECOS
CREATE TABLE ecos_evaluations (
id SERIAL PRIMARY KEY,
session_id INTEGER REFERENCES ecos_sessions(id),
criterion_id VARCHAR(50) NOT NULL,
score INTEGER NOT NULL,
feedback TEXT
);
-- Rapports ECOS
CREATE TABLE ecos_reports (
id SERIAL PRIMARY KEY,
session_id INTEGER REFERENCES ecos_sessions(id),
summary TEXT NOT NULL,
strengths TEXT[],
weaknesses TEXT[],
recommendations TEXT[]
);
3. Nouveaux endpoints API
Extensions minimales de l'API existante :
// routes.ts - Ajouter ces routes
// Routes enseignant
router.post('/api/ecos/scenarios', createScenario);
router.get('/api/ecos/scenarios', listScenarios);
router.get('/api/ecos/scenarios/:id', getScenario);
router.put('/api/ecos/scenarios/:id', updateScenario);
router.delete('/api/ecos/scenarios/:id', deleteScenario);
// Routes étudiant
router.get('/api/ecos/sessions', listSessions);
router.post('/api/ecos/sessions', startSession);
router.put('/api/ecos/sessions/:id', updateSession);
router.get('/api/ecos/sessions/:id/report', getSessionReport);
// Routes chatbot
router.post('/api/ecos/prompt-assistant', generatePatientPrompt);
router.post('/api/ecos/patient-simulator', simulatePatient);
router.post('/api/ecos/evaluate', evaluateInteraction);
4. Services backend à implémenter
4.1 Service de génération de prompts (promptGen.service.ts)
import { OpenAIService } from './openai.service';
import { PineconeService } from './pinecone.service';
export class PromptGenService {
constructor(
private openai: OpenAIService,
private pinecone: PineconeService
) {}
async generatePatientPrompt(teacherInput: string, contextDocs: string[]):
Promise<string> {
// Utiliser le RAG existant pour enrichir le contexte
const embeddedDocs = await this.pinecone.queryVectors(teacherInput);
// Générer un prompt structuré pour le patient virtuel
const prompt = await this.openai.createCompletion({
model: "gpt-4",
messages: [
{
role: "system",
content: "Tu es un assistant qui aide à créer des prompts détaillés pour
simuler des patients dans des scénarios ECOS."
},
{
role: "user",
content: `Crée un prompt détaillé pour un patient virtuel basé sur cette
description: ${teacherInput}.
Utilise également ces informations contextuelles: $
{JSON.stringify(embeddedDocs)}`
}
]
});
return prompt.choices[0].message.content;
}
}
4.2 Service de simulation patient (ecos.service.ts)
import { OpenAIService } from './openai.service';
import { PineconeService } from './pinecone.service';
import { db } from '../db';
export class EcosService {
constructor(
private openai: OpenAIService,
private pinecone: PineconeService
) {}
async simulatePatient(sessionId: number, studentQuery: string):
Promise<string> {
// Récupérer le scénario et le prompt du patient
const session = await db.query(
'SELECT s.patient_prompt FROM ecos_sessions es JOIN ecos_scenarios s ON
es.scenario_id = s.id WHERE es.id = $1',
[sessionId]
);
const patientPrompt = session.rows[0].patient_prompt;
// Récupérer l'historique de la conversation
const history = await this.getSessionHistory(sessionId);
// Générer la réponse du patient virtuel
const response = await this.openai.createCompletion({
model: "gpt-4",
messages: [
{
role: "system",
content: patientPrompt
},
{
...history,
role: "user",
content: studentQuery
}
]
});
// Sauvegarder l'échange
await this.saveInteraction(sessionId, studentQuery,
response.choices[0].message.content);
return response.choices[0].message.content;
}
private async getSessionHistory(sessionId: number) {
// Récupérer l'historique depuis la base de données
// Code similaire à votre gestion d'historique existante
}
{
private async saveInteraction(sessionId: number, query: string, response: string)
// Sauvegarder l'interaction dans la base de données
// Code similaire à votre sauvegarde d'échanges existante
}
}
4.3 Service d'évaluation (evaluation.service.ts)
import { OpenAIService } from './openai.service';
import { db } from '../db';
export class EvaluationService {
constructor(
private openai: OpenAIService
) {}
async evaluateSession(sessionId: number): Promise<any> {
// Récupérer le scénario et les critères d'évaluation
const session = await db.query(
'SELECT s.evaluation_criteria FROM ecos_sessions es JOIN ecos_scenarios s ON
es.scenario_id = s.id WHERE es.id = $1',
[sessionId]
);
const criteria = session.rows[0].evaluation_criteria;
// Récupérer l'historique complet de la session
const history = await this.getCompleteSessionHistory(sessionId);
// Évaluer la performance de l'étudiant
const evaluation = await this.openai.createCompletion({
model: "gpt-4",
messages: [
{
role: "system",
content: `Tu es un évaluateur expert pour les ECOS. Évalue cette interaction
selon ces critères: ${JSON.stringify(criteria)}`
},
{
role: "user",
content: `Voici l'historique complet de l'interaction: ${JSON.stringify(history)}`
}
]
});
// Analyser la réponse pour extraire les scores et feedback
const parsedEvaluation =
this.parseEvaluation(evaluation.choices[0].message.content);
// Sauvegarder l'évaluation
await this.saveEvaluation(sessionId, parsedEvaluation);
// Générer le rapport
const report = await this.generateReport(sessionId, parsedEvaluation);
return {
evaluation: parsedEvaluation,
report
};
}
}
}
}
private async getCompleteSessionHistory(sessionId: number) {
// Récupérer l'historique complet depuis la base de données
private parseEvaluation(evaluationText: string) {
// Parser le texte d'évaluation en structure de données
private async saveEvaluation(sessionId: number, evaluation: any) {
// Sauvegarder l'évaluation dans la base de données
private async generateReport(sessionId: number, evaluation: any) {
// Générer un rapport structuré basé sur l'évaluation
const report = {
summary: "...",
strengths: ["...", "..."],
weaknesses: ["...", "..."],
recommendations: ["...", "..."]
};
// Sauvegarder le rapport
await db.query(
'INSERT INTO ecos_reports (session_id, summary, strengths, weaknesses,
recommendations) VALUES ($1, $2, $3, $4, $5)',
[sessionId, report.summary, report.strengths, report.weaknesses,
report.recommendations]
);
return report;
}
}
5. Composants frontend React
5.1 Interface enseignant
// TeacherAssistant.tsx
import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
export const TeacherAssistant = () => {
const [generatedPrompt, setGeneratedPrompt] = useState('');
const { register, handleSubmit } = useForm();
const onSubmit = async (data) => {
try {
const response = await fetch('/api/ecos/prompt-assistant', {
method: 'POST',
headers: { 'Content-Type': 'application/json' },
body: JSON.stringify({ input: data.teacherInput })
});
const result = await response.json();
setGeneratedPrompt(result.prompt);
} catch (error) {
console.error('Error generating prompt:', error);
}
};
return (
<div className="p-4 bg-white rounded-lg shadow">
<h2 className="text-xl font-bold mb-4">Assistant de création de scénario
ECOS</h2>
<form onSubmit={handleSubmit(onSubmit)}>
<div className="mb-4">
<label className="block text-sm font-medium mb-1">
Décrivez le patient et le scénario clinique
</label>
<textarea
{...register('teacherInput')}
className="w-full p-2 border rounded"
rows={5}
placeholder="Ex: Patient de 62 ans avec BPCO stade III en exacerbation..."
/>
</div>
<button
type="submit"
className="px-4 py-2 bg-blue-600 text-white rounded"
>
Générer le prompt
</button>
</form>
{generatedPrompt && (
<div className="mt-6">
<h3 className="text-lg font-semibold mb-2">Prompt généré</h3>
<div className="p-3 bg-gray-100 rounded">
{generatedPrompt}
</div>
<button
onClick={() => {/* Sauvegarder le scénario */}}
className="mt-3 px-4 py-2 bg-green-600 text-white rounded"
>
Sauvegarder ce scénario
</button>
</div>
)}
</div>
);
};
5.2 Interface étudiant
// PatientSimulator.tsx
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
export const PatientSimulator = () => {
const { sessionId } = useParams();
const [messages, setMessages] = useState([]);
const [input, setInput] = useState('');
const [loading, setLoading] = useState(false);
const [sessionInfo, setSessionInfo] = useState(null);
useEffect(() => {
// Charger les informations de session et l'historique
fetchSessionInfo();
}, [sessionId]);
const fetchSessionInfo = async () => {
// Récupérer les infos de session depuis l'API
};
const sendMessage = async () => {
if (!input.trim()) return;
setLoading(true);
setMessages(prev => [...prev, { role: 'user', content: input }]);
setInput('');
try {
const response = await fetch(`/api/ecos/patient-simulator`, {
method: 'POST',
headers: { 'Content-Type': 'application/json' },
body: JSON.stringify({
sessionId: parseInt(sessionId),
query: input
})
});
const data = await response.json();
setMessages(prev => [...prev, { role: 'assistant', content: data.response }]);
} catch (error) {
console.error('Error:', error);
} finally {
setLoading(false);
}
};
return (
<div className="flex flex-col h-screen">
<div className="p-4 bg-blue-600 text-white">
<h1 className="text-xl font-bold">Simulation ECOS</h1>
{sessionInfo && (
<div className="text-sm">
Scénario: {sessionInfo.title} | Temps restant: {sessionInfo.timeRemaining}
</div>
)}
</div>
<div className="flex-1 overflow-y-auto p-4">
{messages.map((msg, i) => (
<div
key={i}
className={`mb-4 p-3 rounded-lg ${
msg.role === 'user'
? 'bg-blue-100 ml-auto max-w-[80%]'
: 'bg-gray-100 mr-auto max-w-[80%]'
}`}
>
{msg.content}
</div>
))}
{loading && (
<div className="bg-gray-100 p-3 rounded-lg mr-auto max-w-[80%]">
<div className="typing-indicator">
<span></span>
<span></span>
<span></span>
</div>
</div>
)}
</div>
<div className="p-4 border-t">
<div className="flex">
<input
type="text"
value={input}
onChange={(e) => setInput(e.target.value)}
onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
className="flex-1 p-2 border rounded-l"
placeholder="Posez une question au patient..."
/>
<button
onClick={sendMessage}
className="px-4 py-2 bg-blue-600 text-white rounded-r"
disabled={loading}
>
Envoyer
</button>
</div>
</div>
</div>
);
};
5.3 Rapport d'évaluation
// EvaluationReport.tsx
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
export const EvaluationReport = () => {
const { sessionId } = useParams();
const [report, setReport] = useState(null);
const [loading, setLoading] = useState(true);
useEffect(() => {
fetchReport();
}, [sessionId]);
const fetchReport = async () => {
try {
const response = await fetch(`/api/ecos/sessions/${sessionId}/report`);
const data = await response.json();
setReport(data);
} catch (error) {
console.error('Error fetching report:', error);
} finally {
setLoading(false);
}
};
if (loading) return <div className="p-4">Chargement du rapport...</div>;
if (!report) return <div className="p-4">Rapport non disponible</div>;
return (
<div className="p-4 max-w-4xl mx-auto">
<h1 className="text-2xl font-bold mb-6">Rapport d'évaluation ECOS</h1>
<div className="bg-white rounded-lg shadow p-6 mb-6">
<h2 className="text-xl font-semibold mb-4">Résumé</h2>
<p className="text-gray-700">{report.summary}</p>
</div>
<div className="grid grid-cols-1 md:grid-cols-2 gap-6">
<div className="bg-white rounded-lg shadow p-6">
<h2 className="text-xl font-semibold mb-4 text-green-600">Points forts</
h2>
<ul className="list-disc pl-5">
{report.strengths.map((item, i) => (
<li key={i} className="mb-2">{item}</li>
))}
</ul>
</div>
<div className="bg-white rounded-lg shadow p-6">
<h2 className="text-xl font-semibold mb-4 text-red-600">Points à
améliorer</h2>
<ul className="list-disc pl-5">
{report.weaknesses.map((item, i) => (
<li key={i} className="mb-2">{item}</li>
))}
</ul>
</div>
</div>
<div className="bg-white rounded-lg shadow p-6 mt-6">
<h2 className="text-xl font-semibold mb-4 text-
blue-600">Recommandations</h2>
<ul className="list-disc pl-5">
{report.recommendations.map((item, i) => (
<li key={i} className="mb-2">{item}</li>
))}
</ul>
</div>
</div>
);
};
6. Intégration avec LearnWorlds
Étendre le widget JavaScript existant :
// Extension du widget LearnWorlds existant
// Ajouter à chatbot-widget.js
// Détection du rôle utilisateur
const isTeacher = window.LW.user.role === 'instructor' || window.LW.user.role
=== 'admin';
// Ajout des boutons ECOS selon le rôle
if (isTeacher) {
// Ajouter bouton interface enseignant
const teacherButton = document.createElement('button');
teacherButton.innerText = 'Créer ECOS';
teacherButton.className = 'ecos-teacher-button';
teacherButton.onclick = () => {
window.open(`${CHATBOT_URL}/teacher/ecos?email=$
{encodeURIComponent(window.LW.user.email)}`
, '_blank');
};
document.querySelector('.chatbot-controls').appendChild(teacherButton);
} else {
// Ajouter bouton interface étudiant
const studentButton = document.createElement('button');
studentButton.innerText = 'Sessions ECOS';
studentButton.className = 'ecos-student-button';
studentButton.onclick = () => {
window.open(`${CHATBOT_URL}/student/ecos?email=$
{encodeURIComponent(window.LW.user.email)}`
, '_blank');
};
document.querySelector('.chatbot-controls').appendChild(studentButton);
}
7. Modifications minimales requises
7.1 Fichiers à créer
•
•
•
•
3 nouveaux services backend
4 nouvelles tables SQL
3 nouveaux composants React principaux
2 nouvelles pages React
7.2 Fichiers à modifier
•
•
•
routes.ts : Ajouter les nouveaux endpoints
db.ts : Ajouter les nouvelles tables
chatbot-widget.js : Ajouter les boutons ECOS
8. Étapes d'implémentation recommandées
1.
2.
3.
4.
5.
6.
Créer les nouvelles tables SQL
Implémenter les services backend
Ajouter les nouveaux endpoints API
Développer les composants frontend
Étendre le widget LearnWorlds
Tester l'intégration complète
Cette approche permet d'étendre votre système existant avec un minimum de
modifications, en réutilisant l'infrastructure RAG, l'authentification et l'intégration
LearnWorlds déjà en place.