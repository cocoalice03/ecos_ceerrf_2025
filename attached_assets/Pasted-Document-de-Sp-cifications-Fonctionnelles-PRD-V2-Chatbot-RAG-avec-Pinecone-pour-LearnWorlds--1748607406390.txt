Document de SpÃ©cifications Fonctionnelles (PRD) V2
## Chatbot RAG avec Pinecone pour LearnWorlds

---

## 1. Contexte & Objectifs

### Contexte
- Assistant conversationnel intelligent pour LearnWorlds LMS
- Architecture RAG (Retrieval-Augmented Generation) avec Pinecone
- IntÃ©gration via widget JavaScript embarquÃ©
- Authentification par email utilisateur
- HÃ©bergement sur Replit avec dÃ©ploiement automatique

### Objectifs
- âœ… **RÃ©alisÃ©** : RÃ©ponses pertinentes via moteur RAG
- âœ… **RÃ©alisÃ©** : Historisation des Ã©changes en base PostgreSQL
- âœ… **RÃ©alisÃ©** : Limitation Ã  20 questions/jour par utilisateur
- âœ… **RÃ©alisÃ©** : Interface utilisateur Ã©purÃ©e et responsive
- âœ… **RÃ©alisÃ©** : API REST complÃ¨te avec validation

---

## 2. Architecture Technique ImplÃ©mentÃ©e

### Stack Technologique
- **Backend** : Node.js + TypeScript + Express
- **Frontend** : React + TypeScript + Tailwind CSS
- **Base de donnÃ©es** : PostgreSQL (via Replit)
- **Recherche vectorielle** : Pinecone
- **LLM** : OpenAI GPT-4
- **DÃ©ploiement** : Replit avec autoscale

### Structure du Projet
```
â”œâ”€â”€ server/                 # API Backend
â”‚   â”œâ”€â”€ services/          # Services mÃ©tier
â”‚   â”‚   â”œâ”€â”€ learnworlds.service.ts
â”‚   â”‚   â”œâ”€â”€ openai.service.ts
â”‚   â”‚   â””â”€â”€ pinecone.service.ts
â”‚   â”œâ”€â”€ routes.ts          # Routes API
â”‚   â”œâ”€â”€ db.ts             # Configuration PostgreSQL
â”‚   â””â”€â”€ index.ts          # Point d'entrÃ©e serveur
â”œâ”€â”€ client/                # Interface utilisateur
â”‚   â”œâ”€â”€ src/components/   # Composants React
â”‚   â”‚   â”œâ”€â”€ chat/         # Interface de chat
â”‚   â”‚   â”œâ”€â”€ layout/       # Layout et navigation
â”‚   â”‚   â””â”€â”€ ui/           # Composants UI rÃ©utilisables
â”‚   â””â”€â”€ src/pages/        # Pages principales
â”œâ”€â”€ scripts/              # Scripts d'intÃ©gration LearnWorlds
â””â”€â”€ shared/               # SchÃ©mas partagÃ©s (Zod)
```

---

## 3. FonctionnalitÃ©s ImplÃ©mentÃ©es

### 3.1 Interface Utilisateur
- âœ… **Chat en temps rÃ©el** avec interface moderne
- âœ… **Compteur de questions** visible (X/20 utilisÃ©es)
- âœ… **Historique des conversations** persistant
- âœ… **Messages d'erreur** informatifs
- âœ… **Interface responsive** mobile/desktop
- âœ… **Indicateurs de typing** pendant gÃ©nÃ©ration

### 3.2 API Backend
- âœ… **POST /api/webhook** : CrÃ©ation de session utilisateur
- âœ… **POST /api/ask** : Traitement des questions
- âœ… **GET /api/status** : Statut utilisateur et compteur
- âœ… **POST /api/learnworlds/chat** : Endpoint spÃ©cial LearnWorlds
- âœ… **POST /api/admin/upload** : Upload de documents
- âœ… **Validation Zod** pour tous les endpoints

### 3.3 Moteur RAG
- âœ… **Indexation automatique** des documents PDF
- âœ… **Recherche vectorielle** via Pinecone
- âœ… **GÃ©nÃ©ration de rÃ©ponses** avec GPT-4
- âœ… **Context enrichi** avec sources pertinentes

### 3.4 Gestion des Utilisateurs
- âœ… **Authentification par email**
- âœ… **Sessions persistantes**
- âœ… **Limitation quotidienne** (20 questions/jour)
- âœ… **RÃ©initialisation automatique** Ã  minuit UTC+2

---

## 4. SchÃ©ma de Base de DonnÃ©es

### Tables ImplÃ©mentÃ©es
```sql
-- Table des Ã©changes utilisateur
CREATE TABLE exchanges (
  id_exchange SERIAL PRIMARY KEY,
  utilisateur_email VARCHAR(255) NOT NULL,
  question TEXT NOT NULL,
  reponse TEXT NOT NULL,
  timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table des compteurs quotidiens
CREATE TABLE daily_counters (
  utilisateur_email VARCHAR(255) PRIMARY KEY,
  date DATE NOT NULL,
  count INTEGER NOT NULL DEFAULT 0
);

-- Table des sessions utilisateur
CREATE TABLE user_sessions (
  id SERIAL PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  last_activity TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

---

## 5. IntÃ©gration LearnWorlds

### MÃ©thodes d'IntÃ©gration Disponibles

#### 5.1 Widget JavaScript Autonome
- **Fichier** : `chatbot-widget.js`
- **Usage** : Bouton flottant + iframe
- **DÃ©tection automatique** de l'email utilisateur

#### 5.2 IntÃ©gration HTML ComplÃ¨te
- **Fichier** : `scripts/learnworlds-integration.html`
- **Usage** : Interface complÃ¨te embarquÃ©e
- **Styles CSS** personnalisables

#### 5.3 IntÃ©gration SimplifiÃ©e
- **Fichier** : `learnworlds-integration-simple.html`
- **Usage** : Bouton d'ouverture en nouvel onglet

### Configuration LearnWorlds
```javascript
// Ã€ ajouter dans les paramÃ¨tres JavaScript personnalisÃ©
const CHATBOT_URL = 'https://your-replit-app.replit.app';
// Le script dÃ©tecte automatiquement l'email via window.LW.user.email
```

---

## 6. Endpoints API DÃ©taillÃ©s

### 6.1 Webhook Session
```typescript
POST /api/webhook
Content-Type: application/json

{
  "email": "user@example.com"
}

Response: {
  "message": "Session created successfully",
  "session": { ... }
}
```

### 6.2 Question/RÃ©ponse
```typescript
POST /api/ask
Content-Type: application/json

{
  "email": "user@example.com",
  "query": "Comment utiliser cette fonctionnalitÃ© ?"
}

Response: {
  "response": "...",
  "sources": [...],
  "remaining_questions": 18
}
```

### 6.3 Statut Utilisateur
```typescript
GET /api/status?email=user@example.com

Response: {
  "questions_used": 2,
  "questions_remaining": 18,
  "daily_limit": 20,
  "reset_time": "2024-01-01T00:00:00Z"
}
```

---

## 7. Configuration Environnement

### Variables Requises
```env
# Pinecone
PINECONE_API_KEY=your_pinecone_key
PINECONE_INDEX_NAME=your_index_name

# OpenAI
OPENAI_API_KEY=your_openai_key

# Base de donnÃ©es (auto-configurÃ©e sur Replit)
DATABASE_URL=postgresql://...

# Serveur
PORT=5000
NODE_ENV=production
```

---

## 8. SÃ©curitÃ© & Performance

### SÃ©curitÃ© ImplÃ©mentÃ©e
- âœ… **Validation stricte** des inputs (Zod)
- âœ… **Limitation de taux** (20 questions/jour)
- âœ… **Sanitisation** des requÃªtes
- âœ… **CORS configurÃ©** pour LearnWorlds
- âœ… **Logs sÃ©curisÃ©s** sans donnÃ©es sensibles

### Performance
- âœ… **Cache PostgreSQL** pour les sessions
- âœ… **RÃ©ponses optimisÃ©es** (< 2s en moyenne)
- âœ… **Pagination** des conversations
- âœ… **Compression** des rÃ©ponses API

---

## 9. DÃ©ploiement Replit

### Configuration Automatique
```toml
# .replit configurÃ© pour :
- DÃ©ploiement autoscale
- PostgreSQL intÃ©grÃ©
- Variables d'environnement sÃ©curisÃ©es
- Build automatique (npm run build)
- Start automatique (npm run start)
```

### Workflows Disponibles
- **Start LearnWorlds RAG App** : DÃ©marrage dÃ©veloppement
- **Deploy to Production** : DÃ©ploiement automatique

---

## 10. Monitoring & MÃ©triques

### KPIs TrackÃ©s
- âœ… **Nombre de questions/jour** par utilisateur
- âœ… **Temps de rÃ©ponse moyen** API
- âœ… **Taux d'erreur** par endpoint
- âœ… **Utilisation Pinecone** (requÃªtes vectorielles)
- âœ… **Consommation OpenAI** (tokens utilisÃ©s)

### Logs StructurÃ©s
```typescript
// Format de log implÃ©mentÃ©
{
  timestamp: "2024-01-01T12:00:00Z",
  level: "info",
  email: "user@example.com",
  action: "question_asked",
  response_time: "1.2s",
  tokens_used: 150
}
```

---

## 11. Roadmap de DÃ©veloppement

### Phase 1 : âœ… ComplÃ©tÃ©e (Semaines 1-3)
- [x] Architecture de base API + DB
- [x] IntÃ©gration Pinecone + OpenAI
- [x] Interface utilisateur React
- [x] Limitation quotidienne
- [x] Scripts d'intÃ©gration LearnWorlds

### Phase 2 : ðŸš§ En cours (Semaine 4)
- [ ] Tests automatisÃ©s complets
- [ ] Documentation API (Swagger)
- [ ] Panel admin avancÃ©
- [ ] MÃ©triques dÃ©taillÃ©es

### Phase 3 : ðŸ“‹ PlanifiÃ© (Semaines 5-6)
- [ ] Authentification multi-tenant
- [ ] Personnalisation par Ã©cole
- [ ] Cache intelligent des rÃ©ponses
- [ ] Export des conversations

---

## 12. Support & Maintenance

### Documentation Technique
- **API** : Endpoints documentÃ©s avec exemples
- **IntÃ©gration** : Guides step-by-step pour LearnWorlds
- **DÃ©ploiement** : Instructions Replit complÃ¨tes

### Support Utilisateur
- **FAQ intÃ©grÃ©e** dans l'interface
- **Messages d'erreur explicites**
- **Logs dÃ©taillÃ©s** pour debugging

---

## Conclusion

Le projet LearnWorlds RAG Chatbot est **fonctionnellement complet** selon les spÃ©cifications initiales. L'architecture est robuste, scalable et prÃªte pour la production sur Replit.

**Statut actuel** : âœ… MVP Production Ready
**Prochaines Ã©tapes** : Tests, documentation et optimisations